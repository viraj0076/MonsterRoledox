{"version":3,"sources":["Components/Card/card.jsx","Components/cardlists/Card-List.jsx","Components/Search/SearchBox.jsx","Components/Sample.jsx","App.js","reportWebVitals.js","index.js"],"names":["CardComponent","props","className","src","monster","id","alt","name","email","CardList","monsters","map","mt","SearchBox","Component","placeholder","handleChange","type","onChange","App","handlechange","e","setState","searchFeild","target","value","state","fetch","then","resp","json","users","this","filterMonsters","filter","mts","toLowerCase","includes","style","textAlign","fontSize","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sTAaeA,EAVO,SAACC,GACnB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,aAC9E,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCOjBC,EAXE,SAACR,GACd,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAC,GACX,OAAQ,cAAC,EAAD,CAAkBR,QAASQ,GAAhBA,EAAGP,U,OCW5BQ,GCjBMC,Y,MDCH,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAC9B,OACI,mCACF,qBAAKd,UAAU,aAAf,SAEI,uBACEe,KAAK,SACLF,YAAaA,EACbG,SAAUF,EACVd,UAAU,iBEgELiB,E,kDAvDb,aAAe,IAAD,8BACZ,gBAgBFC,aAAe,SAACC,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBvC,EAAKC,MACL,CACEhB,SAAU,GACVa,YAAa,IALH,E,qDAWd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEZ,SAAUqB,S,oBAU7C,WAIE,MAAkCC,KAAKN,MAA/BhB,EAAR,EAAQA,SAAUa,EAAlB,EAAkBA,YACZU,EAAiBvB,EAASwB,QAAO,SAAAC,GACrC,OAAQA,EAAI5B,KAAK6B,cAAcC,SAASd,EAAYa,kBAGtD,OACE,mCACE,sBAAKlC,UAAU,MAAf,UAEA,oBAAIA,UAAU,OAAQoC,MAAO,CAACC,UAAU,SAASC,SAAS,OAAOC,MAAM,SAAvE,6BAEE,cAAC,EAAD,CACE1B,YAAY,iBACZC,aAAcgB,KAAKZ,eAIrB,cAAC,EAAD,CAAUV,SAAUuB,a,GA9CZnB,aCRH4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.05451514.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst CardComponent = (props) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"Monsters\" />\r\n              <h2>{props.monster.name}</h2>\r\n              <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardComponent;\r\n ","import React from 'react';\r\nimport './Card-list.css'\r\nimport Card from '../Card/card'\r\n\r\nconst CardList = (props) => {\r\n    return (\r\n        <div className='card-list'>\r\n            {props.monsters.map(mt =>{\r\n                     return  <Card key={mt.id} monster={mt}/>\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({placeholder,handleChange}) => {\r\n  return (\r\n      <>\r\n    <div className=\"div-Search\">\r\n      \r\n        <input\r\n          type=\"search\"\r\n          placeholder={placeholder}\r\n          onChange={handleChange}\r\n          className='search'\r\n        />\r\n    </div>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass Sample extends Component {\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.handleChange2 = this.handleChange1.bind(this);\r\n    }\r\n    handleChange1()\r\n    {\r\n        console.log('Button ! Is Clicked');\r\n    }\r\n    handleChange3 = () => console.log(\"Handle chnage 3 is clicked\")\r\n\r\n// \"handleChange1()\" is called when the render has been called at the running time\r\n//here at the tim eof thhe invokoing we called the function\r\n//so here if we click the button 1 we can't see anything in thre console\r\n//handleChange1\r\n//here we only pass the function it will only invoke when the venmet happens\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n              <button onClick = {this.handleChange1()}>1</button>\r\n              <button onClick = {this.handleChange2}>2</button>  \r\n              <button onClick = {this.handleChange3}>3</button>\r\n              <button onClick = {this.handleChange3}>4</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sample;","// State is the Rect JS object which can used to store the infromation of thr compoenet kthat we are currently working \n//Set State is used for the change the state of the Component\n//We used the Arrow function for the becuse ut call automaticlly if we don't use the Arrow Function\n\n//Key is used for the only update the element which is change either looking through all the Compoent\n\n//The Compoenent did mount is called when the any Component get reb=nder in the page\n\n//Props means properties of the compinenet that can be passed from the one compienet from to another\n\n\n//Here the this would be not bind to the normla function and because the normal function \"this\" is the undefined so we use the arrow function this will point to the parent context/scope= \"this\" so we use the arrow function  \n\n\nimport { React, Component } from 'react';\nimport './App.css';\nimport CardList from './Components/cardlists/Card-List'\nimport Sample from './Components/Sample';\nimport SearchBox from './Components/Search/SearchBox'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state =\n    {\n      monsters: [],\n      searchFeild: ''\n    }\n  }\n  // for the nomal functionn of the js \n  //  this.handleChange = this.handleChange.bind(this);\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(resp => resp.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  handlechange = (e) =>{\n     this.setState({ searchFeild: e.target.value })\n  }\n\n\n\n\n  render() {\n    // const monsters = this.state.monsters;\n    // const searchFeild = this.state.searchFeild;\n\n    const { monsters, searchFeild } = this.state;\n    const filterMonsters = monsters.filter(mts => {\n      return (mts.name.toLowerCase().includes(searchFeild.toLowerCase()))\n    })\n\n    return (\n      <>\n        <div className='App'>\n\n        <h1 className='my-3'  style={{textAlign:\"center\",fontSize:\"72px\",color:\"white\"}}>Monster Roledox</h1>\n\n          <SearchBox\n            placeholder='Serch Monsters'\n            handleChange={this.handlechange}\n          />\n\n\n          <CardList monsters={filterMonsters} />\n          {/* <Sample/> */}\n\n\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}